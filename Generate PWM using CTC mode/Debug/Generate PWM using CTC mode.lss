
Generate PWM using CTC mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000e8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  0000015c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000001c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000005ca  00000000  00000000  000001f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000054e  00000000  00000000  000007c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000022a  00000000  00000000  00000d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000058  00000000  00000000  00000f3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000337  00000000  00000000  00000f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  000012cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001314  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 4c 00 	jmp	0x98	; 0x98 <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  74:	0c 94 72 00 	jmp	0xe4	; 0xe4 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <Timer1_Init>:
volatile uint8_t count= 0;

void Timer1_Init(void)
{
	// set up timer with prescaler = 0 and CTC mode
	TCCR1B |= (1 << WGM12)|(1 << CS10);
  7c:	8e b5       	in	r24, 0x2e	; 46
  7e:	89 60       	ori	r24, 0x09	; 9
  80:	8e bd       	out	0x2e, r24	; 46
	
	// initialize counter
	TCNT1 = 0;
  82:	1d bc       	out	0x2d, r1	; 45
  84:	1c bc       	out	0x2c, r1	; 44
	
	// initialize compare value
	OCR1A = 19999;
  86:	8f e1       	ldi	r24, 0x1F	; 31
  88:	9e e4       	ldi	r25, 0x4E	; 78
  8a:	9b bd       	out	0x2b, r25	; 43
  8c:	8a bd       	out	0x2a, r24	; 42
	
	// enable compare interrupt
	TIMSK |= (1 << OCIE1A);
  8e:	89 b7       	in	r24, 0x39	; 57
  90:	80 61       	ori	r24, 0x10	; 16
  92:	89 bf       	out	0x39, r24	; 57
	
	// enable global interrupts
	sei();
  94:	78 94       	sei
  96:	08 95       	ret

00000098 <__vector_7>:
}

// this ISR is fired whenever a match occurs
ISR (TIMER1_COMPA_vect)
{
  98:	1f 92       	push	r1
  9a:	0f 92       	push	r0
  9c:	0f b6       	in	r0, 0x3f	; 63
  9e:	0f 92       	push	r0
  a0:	11 24       	eor	r1, r1
  a2:	8f 93       	push	r24
  a4:	9f 93       	push	r25
	// check for the global counter
	// if count == 1, delay required = 11 ms which is 10999
	// if count == 0, delay required = 9 ms which is 1=9999
	// thus, the value of the OCRx should be constantly updated
	if(count)
  a6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  aa:	88 23       	and	r24, r24
  ac:	41 f0       	breq	.+16     	; 0xbe <__vector_7+0x26>
	{
		count=0; //clear count
  ae:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		PORTB|= (1<<PB6); // set Pin
  b2:	c6 9a       	sbi	0x18, 6	; 24
		OCR1A= 10999; //update compare value
  b4:	87 ef       	ldi	r24, 0xF7	; 247
  b6:	9a e2       	ldi	r25, 0x2A	; 42
  b8:	9b bd       	out	0x2b, r25	; 43
  ba:	8a bd       	out	0x2a, r24	; 42
  bc:	08 c0       	rjmp	.+16     	; 0xce <__vector_7+0x36>
	}
	else
	{
		count=1; //set count
  be:	81 e0       	ldi	r24, 0x01	; 1
  c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		PORTB&= ~(1<<PB6); // clear pin
  c4:	c6 98       	cbi	0x18, 6	; 24
		OCR1A= 9999;
  c6:	8f e0       	ldi	r24, 0x0F	; 15
  c8:	97 e2       	ldi	r25, 0x27	; 39
  ca:	9b bd       	out	0x2b, r25	; 43
  cc:	8a bd       	out	0x2a, r24	; 42
	}
}
  ce:	9f 91       	pop	r25
  d0:	8f 91       	pop	r24
  d2:	0f 90       	pop	r0
  d4:	0f be       	out	0x3f, r0	; 63
  d6:	0f 90       	pop	r0
  d8:	1f 90       	pop	r1
  da:	18 95       	reti

000000dc <main>:

int main(void)
{
    // initialize the output pin, say Pb6
    DDRB |= (1 << 6);
  dc:	be 9a       	sbi	0x17, 6	; 23
    
    // initialize timer1
    Timer1_Init();
  de:	0e 94 3e 00 	call	0x7c	; 0x7c <Timer1_Init>
  e2:	ff cf       	rjmp	.-2      	; 0xe2 <main+0x6>

000000e4 <_exit>:
  e4:	f8 94       	cli

000000e6 <__stop_program>:
  e6:	ff cf       	rjmp	.-2      	; 0xe6 <__stop_program>
