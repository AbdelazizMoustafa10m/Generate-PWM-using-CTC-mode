
Generate PWM using CTC mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000166  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  00000166  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000166  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000198  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000048  00000000  00000000  000001d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006a0  00000000  00000000  0000021c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000599  00000000  00000000  000008bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002d8  00000000  00000000  00000e55  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000006c  00000000  00000000  00001130  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037e  00000000  00000000  0000119c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000049  00000000  00000000  0000151a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__vector_7>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <main>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <__vector_7>:
/******************************************************************************************************
*                            This ISR is fired whenever a match occurs
******************************************************************************************************/

ISR (TIMER1_COMPA_vect)
{
  7c:	1f 92       	push	r1
  7e:	0f 92       	push	r0
  80:	0f b6       	in	r0, 0x3f	; 63
  82:	0f 92       	push	r0
  84:	11 24       	eor	r1, r1
  86:	8f 93       	push	r24
  88:	9f 93       	push	r25
	// check for the global counter
	// if Flag == 1, delay required = 13 ms which is 12999
	// if Flag == 0, delay required = 7 ms which is 6999
	// thus, the value of the OCRx should be constantly updated
	if(Flag)
  8a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
  8e:	88 23       	and	r24, r24
  90:	41 f0       	breq	.+16     	; 0xa2 <__vector_7+0x26>
	{
		Flag=0; //Clear Flag
  92:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
		SET_BIT(PORTB,6); // Set Pin 
  96:	c6 9a       	sbi	0x18, 6	; 24
		OCR1A= 12999; //Update compare value
  98:	87 ec       	ldi	r24, 0xC7	; 199
  9a:	92 e3       	ldi	r25, 0x32	; 50
  9c:	9b bd       	out	0x2b, r25	; 43
  9e:	8a bd       	out	0x2a, r24	; 42
  a0:	08 c0       	rjmp	.+16     	; 0xb2 <__vector_7+0x36>
	}
	else
	{
		Flag=1; //Set Flag
  a2:	81 e0       	ldi	r24, 0x01	; 1
  a4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
		CLEAR_BIT(PORTB,6); // Clear Pin
  a8:	c6 98       	cbi	0x18, 6	; 24
		OCR1A= 6999; //Update compare value
  aa:	87 e5       	ldi	r24, 0x57	; 87
  ac:	9b e1       	ldi	r25, 0x1B	; 27
  ae:	9b bd       	out	0x2b, r25	; 43
  b0:	8a bd       	out	0x2a, r24	; 42
	}
}
  b2:	9f 91       	pop	r25
  b4:	8f 91       	pop	r24
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <main>:

int main(void)
{
    /* initialize Pb6 to the output Mode */ 
    SET_BIT(DDRB,6);
  c0:	be 9a       	sbi	0x17, 6	; 23
    /* Initialize Timer1 */
    Timer1_Init();
  c2:	0e 94 64 00 	call	0xc8	; 0xc8 <Timer1_Init>
  c6:	ff cf       	rjmp	.-2      	; 0xc6 <main+0x6>

000000c8 <Timer1_Init>:
*                                         Function Definition
******************************************************************************************************/
void Timer1_Init(void)
{
	/* Set Up Timer1 with Prescaler = 0 */
	SET_BIT(TCCR1B,CS10);
  c8:	8e b5       	in	r24, 0x2e	; 46
  ca:	81 60       	ori	r24, 0x01	; 1
  cc:	8e bd       	out	0x2e, r24	; 46
	/* Set Up Timer1 to Work in CTC Mode */
	SET_BIT(TCCR1B,WGM12);
  ce:	8e b5       	in	r24, 0x2e	; 46
  d0:	88 60       	ori	r24, 0x08	; 8
  d2:	8e bd       	out	0x2e, r24	; 46
	/* Initialize counter with zero */
	TCNT1 = 0;
  d4:	1d bc       	out	0x2d, r1	; 45
  d6:	1c bc       	out	0x2c, r1	; 44
	/* Initialize compare value */
	OCR1A = 19999;
  d8:	8f e1       	ldi	r24, 0x1F	; 31
  da:	9e e4       	ldi	r25, 0x4E	; 78
  dc:	9b bd       	out	0x2b, r25	; 43
  de:	8a bd       	out	0x2a, r24	; 42
	/* Enable compare interrupt */
	SET_BIT(TIMSK,OCIE1A);
  e0:	89 b7       	in	r24, 0x39	; 57
  e2:	80 61       	ori	r24, 0x10	; 16
  e4:	89 bf       	out	0x39, r24	; 57
	/* Enable global interrupts*/
	SET_BIT(SREG,7);
  e6:	8f b7       	in	r24, 0x3f	; 63
  e8:	80 68       	ori	r24, 0x80	; 128
  ea:	8f bf       	out	0x3f, r24	; 63
  ec:	08 95       	ret

000000ee <_exit>:
  ee:	f8 94       	cli

000000f0 <__stop_program>:
  f0:	ff cf       	rjmp	.-2      	; 0xf0 <__stop_program>
